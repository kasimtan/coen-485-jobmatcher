// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.jobmatcher.domain;

import com.jobmatcher.domain.HiringManager;
import com.jobmatcher.domain.HiringManagerDataOnDemand;
import com.jobmatcher.domain.JobApplicant;
import com.jobmatcher.domain.JobApplicantDataOnDemand;
import com.jobmatcher.domain.SavedJobApplicant;
import com.jobmatcher.domain.SavedJobApplicantDataOnDemand;
import com.jobmatcher.service.SavedJobApplicantService;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SavedJobApplicantDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SavedJobApplicantDataOnDemand: @Component;
    
    private Random SavedJobApplicantDataOnDemand.rnd = new SecureRandom();
    
    private List<SavedJobApplicant> SavedJobApplicantDataOnDemand.data;
    
    @Autowired
    HiringManagerDataOnDemand SavedJobApplicantDataOnDemand.hiringManagerDataOnDemand;
    
    @Autowired
    JobApplicantDataOnDemand SavedJobApplicantDataOnDemand.jobApplicantDataOnDemand;
    
    @Autowired
    SavedJobApplicantService SavedJobApplicantDataOnDemand.savedJobApplicantService;
    
    public SavedJobApplicant SavedJobApplicantDataOnDemand.getNewTransientSavedJobApplicant(int index) {
        SavedJobApplicant obj = new SavedJobApplicant();
        setHiringManager(obj, index);
        setJobApplicant(obj, index);
        return obj;
    }
    
    public void SavedJobApplicantDataOnDemand.setHiringManager(SavedJobApplicant obj, int index) {
        HiringManager hiringManager = hiringManagerDataOnDemand.getRandomHiringManager();
        obj.setHiringManager(hiringManager);
    }
    
    public void SavedJobApplicantDataOnDemand.setJobApplicant(SavedJobApplicant obj, int index) {
        JobApplicant jobApplicant = jobApplicantDataOnDemand.getRandomJobApplicant();
        obj.setJobApplicant(jobApplicant);
    }
    
    public SavedJobApplicant SavedJobApplicantDataOnDemand.getSpecificSavedJobApplicant(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SavedJobApplicant obj = data.get(index);
        BigInteger id = obj.getId();
        return savedJobApplicantService.findSavedJobApplicant(id);
    }
    
    public SavedJobApplicant SavedJobApplicantDataOnDemand.getRandomSavedJobApplicant() {
        init();
        SavedJobApplicant obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return savedJobApplicantService.findSavedJobApplicant(id);
    }
    
    public boolean SavedJobApplicantDataOnDemand.modifySavedJobApplicant(SavedJobApplicant obj) {
        return false;
    }
    
    public void SavedJobApplicantDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = savedJobApplicantService.findSavedJobApplicantEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SavedJobApplicant' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SavedJobApplicant>();
        for (int i = 0; i < 10; i++) {
            SavedJobApplicant obj = getNewTransientSavedJobApplicant(i);
            try {
                savedJobApplicantService.saveSavedJobApplicant(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
