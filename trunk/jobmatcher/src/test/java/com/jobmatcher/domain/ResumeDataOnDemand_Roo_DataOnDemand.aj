// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.jobmatcher.domain;

import com.jobmatcher.domain.JobSeeker;
import com.jobmatcher.domain.JobSeekerDataOnDemand;
import com.jobmatcher.domain.Resume;
import com.jobmatcher.domain.ResumeDataOnDemand;
import com.jobmatcher.service.ResumeService;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ResumeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ResumeDataOnDemand: @Component;
    
    private Random ResumeDataOnDemand.rnd = new SecureRandom();
    
    private List<Resume> ResumeDataOnDemand.data;
    
    @Autowired
    JobSeekerDataOnDemand ResumeDataOnDemand.jobSeekerDataOnDemand;
    
    @Autowired
    ResumeService ResumeDataOnDemand.resumeService;
    
    public Resume ResumeDataOnDemand.getNewTransientResume(int index) {
        Resume obj = new Resume();
        setFile(obj, index);
        setJobSeeker(obj, index);
        setName(obj, index);
        return obj;
    }
    
    public void ResumeDataOnDemand.setFile(Resume obj, int index) {
        byte[] file = String.valueOf(index).getBytes();
        obj.setFile(file);
    }
    
    public void ResumeDataOnDemand.setJobSeeker(Resume obj, int index) {
        JobSeeker jobSeeker = jobSeekerDataOnDemand.getRandomJobSeeker();
        obj.setJobSeeker(jobSeeker);
    }
    
    public void ResumeDataOnDemand.setName(Resume obj, int index) {
        String name = "name_" + index;
        if (name.length() > 255) {
            name = name.substring(0, 255);
        }
        obj.setName(name);
    }
    
    public Resume ResumeDataOnDemand.getSpecificResume(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Resume obj = data.get(index);
        BigInteger id = obj.getId();
        return resumeService.findResume(id);
    }
    
    public Resume ResumeDataOnDemand.getRandomResume() {
        init();
        Resume obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return resumeService.findResume(id);
    }
    
    public boolean ResumeDataOnDemand.modifyResume(Resume obj) {
        return false;
    }
    
    public void ResumeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = resumeService.findResumeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Resume' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Resume>();
        for (int i = 0; i < 10; i++) {
            Resume obj = getNewTransientResume(i);
            try {
                resumeService.saveResume(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
